@page "/Tools/document/list/{type:int}/{classNumber:int}/{item:int}"
@using EducationSystem.BlazorServer.Pages.AdminPage.Helper
@using EducationSystem.BlazorServer.Pages.TeacherPage.Helper
@using EducationSystem.BlazorServer.StaticHelper
@using EducationSystem.BlazorServer.StaticHelpers;
@using EducationSystem.Domain.Files;
@using EducationSystem.Shared.Files;
@using EducationSystem.Shared.OutputData;
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager Navigation

<AdminNavMenu />
<VertificationOfAuthorization _roleTypeId="1" />

<head>
    <link rel="stylesheet" href="css/AdminStyle.css">
</head>
<body class="adminPages">

    <div class="content" style="font-size:24px">
        <h3 style="color:purple">
            Основные документы 
        </h3>
        @if ((ListFilePath != null) && (ListFilePath.Value != null))
        {
            @foreach (var item in ListFilePath.Value)
            {
                <div class="link"><a @onclick="@( () => GetFile(item.Id))">@item.Name</a></div>
            }
        }
        <InputFile OnChange="OnInputFile" />
        <div class="padding-20"></div>
        <button class="buttonPage" @onclick="SendToServer">Загрузить </button>
    </div>
</body>

@code {
    [Parameter] public int type { get; set; }
    [Parameter] public int classNumber { get; set; }
    [Parameter] public int item { get; set; }
    FileByte file = new();


    FileByte fileByte = new();
    Response<IEnumerable<FilePathDto>> ListFilePath = new();


    protected override async Task OnInitializedAsync()
    {

        file.PersonId = 0;
        file.ClassNumber = classNumber;
        file.TypeId = type;
        file.ItemNumber = item;

        try
        {
            using var request = await ClientInfo.Http.PostAsJsonAsync("FileData/GetByParams", file);
            request.EnsureSuccessStatusCode();
            ListFilePath = await request.Content.ReadFromJsonAsync<Response<IEnumerable<FilePathDto>>>();
        }
        catch
        {

        }

    }

    async Task OnInputFile(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else
        {
            DateTime time = DateTime.Now;
            fileByte.Name = file.Name;
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 5048000000).CopyToAsync(ms);
                fileByte.Data = ms.ToArray();
            }
            fileByte.Path = @"TeacherFile";
            fileByte.TypeId = type;
            fileByte.ClassNumber = classNumber;
            fileByte.ItemNumber = item;
            fileByte.PersonId = 0;
        }
    }
    private async Task SendToServer()
    {
        using var request = await ClientInfo.Http.PostAsJsonAsync("FileData/Send", fileByte);
        try
        {
            using var request1 = await ClientInfo.Http.PostAsJsonAsync("FileData/GetByParams", file);
            request1.EnsureSuccessStatusCode();
            ListFilePath = await request1.Content.ReadFromJsonAsync<Response<IEnumerable<FilePathDto>>>();

        }
        catch
        {

        }
        StateHasChanged();
    }
    private void GetFile(int id)
    {
        Navigation.NavigateTo("http://localhost:9730/" + $"FileData/GetByPath/{id}");
    }
}
