@page "/mainAdmin/Tools/student/update/{_personId:int}"

@using EducationSystem.BlazorServer.Pages.AdminPage.Helper
@using EducationSystem.BlazorServer.SharedPages
@using EducationSystem.BlazorServer.StaticHelper
@using EducationSystem.BlazorServer.StaticHelpers
@using EducationSystem.Shared.InputData
@using EducationSystem.Shared.Models
@using EducationSystem.Shared.OutputData
@using System.Text.Json
@using EducationSystem.Shared.Role

<AdminNavMenu />
<head>
    <link rel="stylesheet" href="css/AdminStyle.css">
</head>
<body class="adminPage">
    <VertificationOfAuthorization _roleTypeId="1" />
    <div class="content">
        <h1>Изменение персоны</h1>
        @if ((_searchEntity!=null)&&(_searchEntity.Value!=null))
        {
             <span class="info">
            <div>Персона @_searchEntity.Value.Surname @_searchEntity.Value.Name @_searchEntity.Value.MiddleName</div>
            <div>Дата создания: @_searchEntity.Value.DateCreate.ToString("dd/MM/yyyy")</div>
            @if (!(_searchEntity.Value.DateUpdate == null))
            {
                <div>Дата последнего изменения: @_searchEntity.Value.DateUpdate</div>
            }
            @if (!(_searchEntity.Value.DateHidden == null))
            {
                <div>Дата скрытия персоны из списка: @_searchEntity.Value.DateHidden</div>
            }
            <div>Роль персоны @_searchEntity.Value.Role.Name</div>
            </span>
            <div class="padding-20"></div>
            <table>
                <tbody>
                    <tr>
                        <td>Фамилия</td>
                        <td><input type="text" @bind="_newPerson.Surname" /></td>
                    </tr>
                    <tr>
                        <td>Имя</td>
                        <td><input type="text" @bind="_newPerson.Name" /></td>
                    </tr>
                    <tr>
                        <td>Отчество</td>
                        <td><input type="text" @bind="_newPerson.MiddleName" /></td>
                    </tr>
                    <tr>
                        <td>Роль</td>
                        <td>
                            <select class="input-text-conf" @bind="_newPerson.RoleId">
                                @if ((ListRole!=null)&&(ListRole.Value!=null))
                                @foreach (var item in ListRole.Value)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </td>
                    </tr>
                </tbody>
            </table>
            <button class="buttonPage" @onclick="PersonUpdate">Изменить</button>
        }
        else
        {
            <LoadingPageLayout />
        }

        @if ((_response.Error==true)||(_response.Value==null))
        {
            <div>@_response.ErrorMessage</div>
            <div>@_response.ErrorInfo</div>
        }
        @if (check)
        {
            <div class="success">Обновлено</div>
        }

    </div>
</body>

@code
{
    [Parameter]
    public int _personId { get; set; }
    PersonInput _newPerson = new();
    Response<PersonDto> _searchEntity = new();
    Response<PersonDto> _response = new();

    Response<IEnumerable<UserRoleDto>> ListRole = new();

    bool check;
    protected override async Task OnInitializedAsync()
    {
        check = false;
        await Task.Delay(1000);
    try
        {

            ListRole = await ClientInfo.Http.GetFromJsonAsync<Response<IEnumerable<UserRoleDto>>>($"PersonRole/GetAllEnumerable");
            _searchEntity = await ClientInfo.Http.GetFromJsonAsync<Response<PersonDto>>($"Person/FindById/{_personId}");

        }
        catch (Exception ex)
        {
            _response = new("Ошибка отправление запроса на сервер",ex.Message);
        }
    }
    private async Task PersonUpdate()
    {
        if ((string.IsNullOrWhiteSpace(_newPerson.Surname)) && (string.IsNullOrWhiteSpace(_newPerson.Name)) && ((string.IsNullOrWhiteSpace(_newPerson.MiddleName))) && (_newPerson.RoleId == 0))
        {
            _response = new("Поля не заполнены", "");
        }
        else
        {
            try
            {
                using var request = await ClientInfo.Http.PutAsJsonAsync($"Person/Update/{_personId}", _newPerson);
                request.EnsureSuccessStatusCode();
                _response = await request.Content.ReadFromJsonAsync<Response<PersonDto>>();
                if (_response!=null)
                {
                    _searchEntity = _response;
                    check = true;
                }
            }
            catch (Exception ex)
            {
                _response = new("Ошибка обновления",ex.Message);
            }
    }
    }
}